#!/usr/bin/env ruby

require 'QuizletNerdClient'

include GLI::App
include QuizletNerdClient

# Exit codes:
ERROR_UNABLE_TO_AUTHORIZE = 2
ERROR_UNAUTHORIZED = 3

program_desc 'Unofficial & unsupported command line client for Quizlet.com'

version QuizletNerdClient::VERSION

subcommand_option_handling :normal
arguments :strict

# desc 'Describe some switch here'
# switch [:s,:switch]

desc 'Output format'
default_value 'table'
arg_name 'The name of the argument'
flag [:f, :format, 'format'], must_match: %w(table json), required: true

def initialized?
  settings = PreferenceManager.instance
  settings.client_id && settings.app_secret && settings.username
end

# ===============================
# RESET
# ===============================
desc 'Delete the ~/.qnc.conf file'
command :reset do |c|
  c.action do |_global_options, _options, _args|
    QuizLetClient.new.reset
  end
end

# ===============================
# INIT
# ===============================
desc 'Store the client-id, the app-secret and the username in ~/.quizlet.conf'
command :init do |c|
  c.desc 'Quizlet API client id'
  c.flag [:c, :clientid, 'client-id'], required: true

  c.desc 'Quizlet API app secret'
  c.flag [:a, :appsecret, 'app-secret'], required: true

  c.desc 'Quizlet username'
  c.flag [:u, :username, 'username'], required: true

  c.action do |_global_options, options, _args|
    client_id = options[:clientid]
    app_secret = options[:appsecret]
    username = options[:username]

    if !initialized? || agree('Overwrite your previous credentials? (Yes | No)')
      PreferenceManager.instance.store_preferences(client_id, app_secret, username)
    end
  end
end

# ===============================
# LOGIN
# ===============================
desc 'Login on Quizlet.com and authorize this script'
command :login do |c|
  c.action do |_global_options, _options, _args|
    unless initialized?
      puts "Missing configuration file.\nPlease run: 'qnc init --client_id xxxx --app_secret yyyy --username zzzz'"
      exit_now! 'Configuration not found', ERROR_UNAUTHORIZED
    end

    quizlet_client = QuizLetClient.new
    if quizlet_client.authorized?
      puts "A token is already available, you don't need to login again. To login with different credentials run 'qnc reset'"

    elsif agree('This script will open a new browser window, please login and authorize. Continue?  (Yes | No)')
      # Open a browser
      quizlet_client.authorize

      # Start listening on port 8080
      auth_code = HttpServer.new.listen

      unless auth_code && !auth_code.empty?
        puts 'Unable to get an authorization code'
        exit_now! 'Unable to authorize', ERROR_UNABLE_TO_AUTHORIZE
      end

      # Request an API Token using the auth code.
      quizlet_client.api_token(auth_code)
      puts 'Token stored with success'
    end
  end
end

# ===============================
# GET COMMANDS
# ===============================
desc 'Retrieve items from Quizlet.com'
command :get do |c|
  # ===============================
  # GET PROFILE
  # ===============================
  c.desc 'Get user\'s profile'
  c.command :profile do |get_profile|
    get_profile.action do |_global_options, options, args|
      puts QuizLetClient.new.profile
    end
  end

  # ===============================
  # GET CLASSES
  # ===============================
  c.desc 'Get user\'s classes'
  c.command :classes do |get_classes|
    get_classes.action do |global_options, options, args|
      result = QuizLetClient.new.classes

      keys = %w(id name)
      result = result.map { |hash| hash.filter(keys) }

      if global_options[:format] == 'table'
        formatter = OutputFormatter.new
        formatter.print_array_table(result, keys)
      else
        puts JSON.pretty_generate(result)
      end
    end
  end

  # ===============================
  # GET CLASS's SETS
  # ===============================
  c.desc 'Get class\'s sets'
  c.command :'class-sets' do |get_class_sets|
    get_class_sets.flag [:c, :class, 'class'], required: true
    get_class_sets.action do |global_options, options, args|
      result = QuizLetClient.new.class_sets(options[:class])

      keys = %w(id title)
      result = result.map { |hash| hash.filter(keys) }

      if global_options[:format] == 'table'
        formatter = OutputFormatter.new
        formatter.print_array_table(result, keys)
      else
        puts JSON.pretty_generate(result)
      end
    end
  end

  # ===============================
  # GET CLASS
  # ===============================
  c.desc 'Get a class'
  c.command :class do |get_class|
    get_class.flag [:c, :class, 'class'], required: true
    get_class.action do |global_options, options, args|
      result = QuizLetClient.new.class(options[:class])

      keys = %w(id name url set_count)
      result = result.filter(keys)

      if global_options[:format] == 'table'
        formatter = OutputFormatter.new
        formatter.print_hash_table(result)
      else
        puts JSON.pretty_generate(result)
      end
    end
  end



  # ===============================
  # GET SETS
  # ===============================
  c.desc 'Get user\'s sets'
  c.command :sets do |get_sets|
    get_sets.action do |global_options, options, args|
      result = QuizLetClient.new.sets

      keys = %w(id title)
      result = result.map { |hash| hash.filter(keys) }

      if global_options[:format] == 'table'
        formatter = OutputFormatter.new
        formatter.print_array_table(result, keys)
      else
        puts JSON.pretty_generate(result)
      end
    end
  end

  # ===============================
  # GET TERMS
  # ===============================
  c.desc 'Get all the terms in a specific set'
  c.command :terms do |get_terms|
    get_terms.flag [:s, :set, 'set'], required: true
    get_terms.action do |global_options, options, args|
      result = QuizLetClient.new.terms(options[:set])

      keys = %w(id term definition)
      result = result.map { |hash| hash.filter(keys) }

      if global_options[:format] == 'table'
        formatter = OutputFormatter.new
        formatter.print_array_table(result, keys)
      else
        puts JSON.pretty_generate(result)
      end
    end
  end
end


# ===============================
# ADD COMMANDS
# ===============================
desc 'Add items (like terms or sets) to Quizlet.com'
command :add do |c|

  # ===============================
  # ADD CLASS
  # ===============================
  c.desc 'Add a new class'
  c.command :class do |add_class|
    add_class.flag [:n, :name, 'name'], required: true
    add_class.flag [:d, :description, 'description'], required: true

    add_class.action do |global_options, options, _args|
      result = QuizLetClient.new.add_class(options[:name], options[:description])

      if global_options[:format] == 'table'
        formatter = OutputFormatter.new
        formatter.print_hash_table(result)
      else
        puts JSON.pretty_generate(result)
      end
    end
  end

  # ===============================
  # ADD SET TO A CLASS
  # ===============================
  c.desc 'Add a set to an existing class'
  c.command :'set-to-class' do |add_set_to_class|
    add_set_to_class.flag [:s, :set, 'set'], required: true
    add_set_to_class.flag [:c, :class, 'class'], required: true

    add_set_to_class.action do |global_options, options, _args|
      result = QuizLetClient.new.add_set_to_class(options[:set], options[:class])

      # This call should return something but for some reason (bug?) it doesn't.
    end
  end

  # ===============================
  # ADD TERM
  # ===============================
  c.desc 'Add a term to a specific set'
  c.command :term do |add_term|
    add_term.flag [:s, :set, 'set'], required: true
    add_term.flag [:t, :term, 'term'], required: true
    add_term.flag [:d, :definition, 'definition'], required: true

    add_term.action do |global_options, options, _args|
      result = QuizLetClient.new.add_term(options[:set], options[:term], options[:definition])

      if global_options[:format] == 'table'
        formatter = OutputFormatter.new
        formatter.print_hash_table(result)
      else
        puts JSON.pretty_generate(result)
      end
    end
  end
end

# ===============================
# UPDATE COMMANDS
# ===============================
desc 'Update items from Quizlet.com'
command :update do |c|
  # ===============================
  # UPDATE CLASS
  # ===============================
  c.desc 'Update name and description of a class'
  c.command :class do |update_class|
    update_class.flag [:c, :class, 'class'], required: true
    update_class.flag [:n, :name, 'name'], required: true
    update_class.flag [:d, :description, 'description'], required: true

    update_class.action do |global_options, options, args|
      result = QuizLetClient.new.update_class(options[:class], options[:name], options[:description])

      # This call should return something but for some reason (bug?) it doesn't.
      # I sent a message to the quizlet guys
    end
  end
end

# ===============================
# DELETE COMMANDS
# ===============================
desc 'Delete items from Quizlet.com'
command :delete do |c|
  # ===============================
  # DELETE TERMS
  # ===============================
  c.desc 'Delete a term from a specific set'
  c.command :term do |delete_term|
    delete_term.flag [:s, :set, 'set'], required: true
    delete_term.flag [:t, :term, 'term'], required: true

    delete_term.action do |_global_options, options, _args|
      QuizLetClient.new.delete_term(options[:set], options[:term])
    end
  end

  # ===============================
  # DELETE CLASS
  # ===============================
  c.desc 'Delete a class'
  c.command :class do |delete_class|
    delete_class.flag [:c, :class, 'class'], required: true

    delete_class.action do |global_options, options, args|
      QuizLetClient.new.delete_class(options[:class])
    end
  end
end

exit run(ARGV)
